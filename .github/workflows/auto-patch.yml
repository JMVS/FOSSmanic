name: Update FOSSmaniac (auto-patch)

on:
  workflow_dispatch:  # permite ejecutarlo manualmente
  schedule:
    - cron: '0 3 * * *'  # opcional: corre todos los días a las 03:00 UTC

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout FOSSmaniac repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # seguridad

      - name: Get latest Unmanic tag
        id: get_tag
        run: |
          LATEST_TAG=$(git ls-remote --tags https://github.com/Unmanic/unmanic.git | grep -Eo "refs/tags/[0-9\.]+$" | tail -n1 | sed 's#refs/tags/##')
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Skip if already updated
        run: |
          if git rev-parse "refs/tags/${{ steps.get_tag.outputs.latest_tag }}" >/dev/null 2>&1; then
            echo "Already up to date with upstream tag ${{ steps.get_tag.outputs.latest_tag }}"
            exit 0
          fi

      - name: Clone latest Unmanic source
        run: |
          rm -rf unmanic-temp
          git clone --depth 1 --branch ${{ steps.get_tag.outputs.latest_tag }} https://github.com/Unmanic/unmanic.git unmanic-temp

      - name: Replace files with patched versions
        run: |
          # Copiar código base
          rsync -a --delete --exclude='.git' unmanic-temp/ ./
          rm -rf unmanic-temp

          # Reemplazar tus archivos personalizados
          cp foss/foss.py unmanic/libs/session.py
          cp foss/README.md ./README.md
          cp foss/icon.png unmanic/static/img/icon.png
          cp foss/logo.png unmanic/static/img/logo.png
          cp foss/logo-white_font.png unmanic/static/img/logo-white_font.png

      - name: Commit and tag update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Update to Unmanic ${{ steps.get_tag.outputs.latest_tag }} + FOSSmaniac patch" || echo "No changes to commit"
          git tag ${{ steps.get_tag.outputs.latest_tag }}
          git push origin main --tags

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_tag.outputs.latest_tag }}
          name: "FOSSmaniac ${{ steps.get_tag.outputs.latest_tag }}"
          draft: false
          generateReleaseNotes: true
