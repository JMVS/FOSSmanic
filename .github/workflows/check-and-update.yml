name: Check and Update Upstream

on:
  schedule:
    - cron: '0 */6 * * *'  # Cada 6 horas
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if up to date'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout FOSSmanic
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch upstream commit
        id: fetch
        run: |
          UPSTREAM_SHA=$(git ls-remote https://github.com/Unmanic/unmanic.git refs/heads/master | awk '{print $1}')
          echo "sha=$UPSTREAM_SHA" >> $GITHUB_OUTPUT
          SHORT_SHA="${UPSTREAM_SHA:0:7}"
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "📦 Upstream SHA: $UPSTREAM_SHA ($SHORT_SHA)"

      - name: Read current SHA
        id: current
        run: |
          if [ -f .upstream-sha ]; then
            CURRENT_SHA=$(cat .upstream-sha)
          else
            CURRENT_SHA="none"
          fi
          echo "sha=$CURRENT_SHA" >> $GITHUB_OUTPUT
          SHORT_CURRENT="${CURRENT_SHA:0:7}"
          echo "📌 Current SHA: $CURRENT_SHA ($SHORT_CURRENT)"

      - name: Check if update needed
        id: check
        run: |
          FORCE="${{ inputs.force_update }}"
          
          if [ "${{ steps.fetch.outputs.sha }}" != "${{ steps.current.outputs.sha }}" ] || [ "$FORCE" = "true" ]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "✅ Update available!"
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "✅ Already up to date"
            exit 0
          fi

      - name: Configure Git
        if: steps.check.outputs.needs_update == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create update branch
        if: steps.check.outputs.needs_update == 'true'
        id: branch
        run: |
          BRANCH="update-${{ steps.fetch.outputs.short_sha }}-$(date +%Y%m%d-%H%M%S)"
          echo "name=$BRANCH" >> $GITHUB_OUTPUT
          
          # Eliminar rama si existe
          git push origin --delete "$BRANCH" 2>/dev/null || true
          
          git checkout -b "$BRANCH"
          echo "📝 Created branch: $BRANCH"

      - name: Clone upstream Unmanic
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "📥 Cloning Unmanic from master branch..."
          git clone --branch master --single-branch https://github.com/Unmanic/unmanic.git /tmp/unmanic-upstream
          cd /tmp/unmanic-upstream
          
          # Verificar que estamos en el commit correcto
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Current commit: $CURRENT_COMMIT"
          echo "Expected commit: ${{ steps.fetch.outputs.sha }}"
          
          if [ "$CURRENT_COMMIT" != "${{ steps.fetch.outputs.sha }}" ]; then
            echo "⚠️  Warning: Commit mismatch, checking out specific commit..."
            git checkout ${{ steps.fetch.outputs.sha }}
          fi
          
          echo "✅ Cloned at commit ${{ steps.fetch.outputs.short_sha }}"

      - name: Backup FOSS files
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "💾 Backing up FOSS files..."
          mkdir -p /tmp/foss-backup
          
          # Backup directories
          [ -d foss ] && cp -r foss /tmp/foss-backup/
          [ -d .github ] && cp -r .github /tmp/foss-backup/
          
          # Backup files
          [ -f .upstream-sha ] && cp .upstream-sha /tmp/foss-backup/
          [ -f Dockerfile ] && cp Dockerfile /tmp/foss-backup/
          [ -f docker-compose.yml ] && cp docker-compose.yml /tmp/foss-backup/
          [ -f README.md ] && cp README.md /tmp/foss-backup/
          [ -f LICENSE ] && cp LICENSE /tmp/foss-backup/
          
          # List what we backed up
          echo "Backed up files:"
          ls -la /tmp/foss-backup/
          if [ -d /tmp/foss-backup/foss ]; then
            echo "FOSS directory contents:"
            ls -la /tmp/foss-backup/foss/
          fi
          
          echo "✅ FOSS files backed up"

      - name: Clear workspace
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "🗑️  Clearing workspace..."
          
          # Eliminar todo excepto .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          
          echo "✅ Workspace cleared"

      - name: Copy upstream code
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "📋 Copying upstream code..."
          
          # Copiar todo desde upstream
          shopt -s dotglob
          cp -r /tmp/unmanic-upstream/* .
          
          # Eliminar .git de upstream si existe
          rm -rf .git/config.lock 2>/dev/null || true
          
          echo "✅ Upstream code copied"

      - name: Restore FOSS files
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "📦 Restoring FOSS structure files..."
          
          # Restaurar directorios
          [ -d /tmp/foss-backup/foss ] && cp -r /tmp/foss-backup/foss .
          [ -d /tmp/foss-backup/.github ] && cp -r /tmp/foss-backup/.github .
          
          # Restaurar archivos
          [ -f /tmp/foss-backup/.upstream-sha ] && cp /tmp/foss-backup/.upstream-sha .
          [ -f /tmp/foss-backup/Dockerfile ] && cp /tmp/foss-backup/Dockerfile .
          [ -f /tmp/foss-backup/docker-compose.yml ] && cp /tmp/foss-backup/docker-compose.yml .
          [ -f /tmp/foss-backup/README.md ] && cp /tmp/foss-backup/README.md .
          [ -f /tmp/foss-backup/LICENSE ] && cp /tmp/foss-backup/LICENSE .
          
          echo "✅ FOSS structure files restored"

      - name: Apply FOSS overwrites
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "🔧 Applying FOSS overwrites..."
          
          if [ ! -d foss ]; then
            echo "❌ ERROR: foss/ directory not found"
            exit 1
          fi
          
          ERRORS=0
          
          # 1. session.py (from foss.py)
          if [ -f foss/foss.py ]; then
            mkdir -p unmanic/libs
            cp foss/foss.py unmanic/libs/session.py
            echo "  ✅ unmanic/libs/session.py (from foss.py)"
          else
            echo "  ❌ ERROR: foss/foss.py not found"
            ERRORS=$((ERRORS + 1))
          fi
          
          # 2. icon.png
          if [ -f foss/icon.png ]; then
            cp foss/icon.png icon.png
                echo "  ✅ icon.png"
              done
          else
            echo "  ❌ ERROR: foss/icon.png not found"
          fi
          
          # 3. logo.png
          if [ -f foss/logo.png ]; then
            cp foss/logo.png logo.png
                echo "  ✅ logo.png"
              done
          else
            echo "  ❌ ERROR: foss/logo.png not found"
          fi
          
          # 4. logo-white_font.png
          if [ -f foss/logo-white_font.png ]; then
            cp foss/logo-white_font.png logo-white_font.png
                echo "  ✅ logo-white_font.png"
              done
          else
            echo "  ❌ ERROR: foss/logo-white_font.png not found"
          fi
          
          # 5. README.md (from foss/README.md to unmanic/README.md if exists)
          if [ -f foss/README.md ]; then
            cp foss/README.md README.md
            echo "  ✅  README.md"
             else
            echo "  ℹ️  Info: foss/README.md not provided"
          fi
          
          if [ $ERRORS -gt 0 ]; then
            echo "❌ Failed with $ERRORS critical error(s)"
            exit 1
          fi
          
          echo "✅ FOSS overwrites applied"

      - name: Verify patches
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "🔍 Verifying patches..."
          
          ERRORS=0
          
          # Verificar session.py
          if [ ! -f unmanic/libs/session.py ]; then
            echo "❌ ERROR: unmanic/libs/session.py not found"
            ERRORS=$((ERRORS + 1))
          else
            if ! grep -q "level = 5" unmanic/libs/session.py; then
              echo "❌ ERROR: level = 5 not found"
              ERRORS=$((ERRORS + 1))
            else
              echo "  ✅ level = 5"
            fi
            
            if ! grep -q "library_count = 999" unmanic/libs/session.py; then
              echo "❌ ERROR: library_count = 999 not found"
              ERRORS=$((ERRORS + 1))
            else
              echo "  ✅ library_count = 999"
            fi
            
            if ! grep -q "link_count = 999" unmanic/libs/session.py; then
              echo "❌ ERROR: link_count = 999 not found"
              ERRORS=$((ERRORS + 1))
            else
              echo "  ✅ link_count = 999"
            fi
          fi
          
          if [ $ERRORS -eq 0 ]; then
            echo "✅ All patches verified"
          else
            echo "❌ Verification failed with $ERRORS error(s)"
            exit 1
          fi

      - name: Update metadata
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "📝 Updating metadata..."
          
          # Actualizar .upstream-sha
          echo "${{ steps.fetch.outputs.sha }}" > .upstream-sha
          
          # Actualizar README principal (no el de foss/)
          if [ -f README.md ]; then
            sed -i "s/Based on Unmanic commit: \`[^`]*\`/Based on Unmanic commit: \`${{ steps.fetch.outputs.short_sha }}\`/" README.md || true
          fi
          
          echo "✅ Metadata updated"

      - name: Commit changes
        if: steps.check.outputs.needs_update == 'true'
        id: commit
        run: |
          git add -A
          
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No changes to commit"
          else
            git commit -m "chore: update to upstream ${{ steps.fetch.outputs.short_sha }}

          - Merged upstream Unmanic commit ${{ steps.fetch.outputs.sha }}
          - Applied FOSS overwrites:
            * session.py (from foss.py)
            * icon.png
            * logo.png
            * logo-white_font.png
            * README.md (/)
          - Updated metadata"
            
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Changes committed"
          fi

      - name: Push branch
        if: steps.check.outputs.needs_update == 'true' && steps.commit.outputs.has_changes == 'true'
        run: |
          echo "📤 Pushing to origin..."
          git push -u origin ${{ steps.branch.outputs.name }}
          echo "✅ Branch pushed"

      - name: Create Pull Request
        if: steps.check.outputs.needs_update == 'true' && steps.commit.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ steps.fetch.outputs.sha }}';
            const shortSha = '${{ steps.fetch.outputs.short_sha }}';
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Update to upstream ${shortSha}`,
              head: '${{ steps.branch.outputs.name }}',
              base: 'main',
              body: `## 📦 Upstream Update
            
            Merged upstream Unmanic at commit: [\`${shortSha}\`](https://github.com/Unmanic/unmanic/commit/${sha})
            
            ### ✅ FOSS Overwrites Applied
            - \`unmanic/libs/session.py\` ← \`foss/foss.py\`
            - \`unmanic/**/icon.png\` ← \`foss/icon.png\`
            - \`unmanic/**/logo.png\` ← \`foss/logo.png\`
            - \`unmanic/**/logo-white_font.png\` ← \`foss/logo-white_font.png\`
            - \`unmanic/README.md\` ← \`foss/README.md\` (if exists)
            
            ### 🎯 Changes
            - **Supporter level:** 5
            - **Library limit:** 999
            - **Remote installations:** 999
            - **Phone home:** disabled
            - **Custom branding:** FOSS logos
            
            ### 🔍 Verification
            - [x] Patches applied correctly
            - [x] All verifications passed
            
            ---
            🤖 **Auto-generated by GitHub Actions**`
            });
            
            console.log(`✅ Pull Request created: #${pr.number}`);
            console.log(`🔗 ${pr.html_url}`);

      - name: Job Summary
        if: always()
        run: |
          echo "## 📊 Update Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check.outputs.needs_update }}" = "true" ]; then
            echo "✅ **Update available**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Upstream SHA:** \`${{ steps.fetch.outputs.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Current SHA:** \`${{ steps.current.outputs.sha }}\`" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.commit.outputs.has_changes }}" = "true" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ✅ FOSS Files Overwritten" >> $GITHUB_STEP_SUMMARY
              echo "- \`session.py\` (from foss.py)" >> $GITHUB_STEP_SUMMARY
              echo "- \`icon.png\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`logo.png\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`logo-white_font.png\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`README.md\` (if applicable)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ Pull request created successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "ℹ️ No code changes detected" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ **Already up to date**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Current SHA:** \`${{ steps.current.outputs.sha }}\`" >> $GITHUB_STEP_SUMMARY
          fi
